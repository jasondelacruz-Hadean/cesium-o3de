/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <scenesrg.srgi>
#include <GltfStandardPBR_Common.azsli>
#include <GltfStandardPBR_ObjectSrg.azsli>
//#include <Atom/Features/InstancedTransforms.azsli>


struct VSInput
{
    float3 m_position : POSITION;
};
 
struct VSDepthOutput
{
    precise float4 m_position : SV_Position;
};

VSDepthOutput DepthPassVS(VSInput IN)
{
    VSDepthOutput OUT;
 
    float4x4 objectToWorld = ObjectSrg::GetWorldMatrix();
    float4 worldPosition = mul(objectToWorld, float4(IN.m_position, 1.0));
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, worldPosition);

    return OUT;
}

/*VsOutput DepthPassVS(VsInput IN, uint instanceId : SV_InstanceID)
{
    VsSystemValues SV;
    SV.m_instanceId = instanceId;
    return EvaluateVertexGeometry(IN, SV);
}

struct PsDepthOutput
{
    precise float depth : SV_Depth;
};

PsDepthOutput MainPS(VsOutput IN, bool isFrontFace : SV_IsFrontFace)
{
    PixelGeometryData geoData = EvaluatePixelGeometry(IN, isFrontFace);

    Surface surface = EvaluateSurface(IN, geoData);

#if !FORCE_OPAQUE
    CheckClipping(surface.alpha, 0.5);
#endif

    PsDepthOutput OUT;
    OUT.depth = surface.position.z;
    return OUT;
}
*/


